const path = require('path')
const fs = require('fs')
const {
    errorLog,
    successLog,
    log
} = require('../utils/logger')
const {
    convertToTitleCase
} = require('../utils/toTitleCase')
const {
    convertToPascalCase
} = require('../utils/toPascalCase')
const { convertToCamelCase } = require('../utils/toCamelCase')

const sampleComponentFilePath = path.join(__dirname, "..", "..", "public", "component.tsx")
const sampleScssFilePath = path.join(__dirname, "..", "..", "public", "component.scss")

function generateComponent(name, filePath) {
    //path diagonise
    const fileNames = name.split(" ")
    const kebabCase = fileNames.map(name => name.toLowerCase()).join("-")
    const pascalCase = convertToPascalCase(name)
    const camelCase = convertToCamelCase(name)

    const paths = filePath.split("/")
    paths[0].includes(".") && paths.shift()

    if (paths[0] !== "src")
        paths.unshift("src")

    if (paths[paths.length - 1] === convertToPascalCase(name))
        paths.pop()
    paths.push(pascalCase)
    try {
        let existanceCheckPath = process.cwd()
        paths.forEach(specificPath => {
            existanceCheckPath = path.join(existanceCheckPath, specificPath)
            if (!fs.existsSync(existanceCheckPath))
                fs.mkdirSync(existanceCheckPath)
        });

        //files creation
        const rawCompoentFile = fs.readFileSync(sampleComponentFilePath).toString()

        const componentFile = rawCompoentFile
            .replace(/Component/gm, pascalCase)
            .replace(/component/gm, camelCase)
            .replace(/classname/gm, kebabCase)
            .split("\n")
            .slice(1)
            .join("\n")

        const scssFile = fs.readFileSync(sampleScssFilePath).toString()
            .replace(/component/gm, kebabCase)

        fs.writeFileSync(path.join(existanceCheckPath, "index.tsx"), componentFile)
        fs.writeFileSync(path.join(existanceCheckPath, camelCase + ".scss"), scssFile)

        successLog(`${convertToTitleCase(name)} component created...`)
    } catch (error) {
        errorLog("Unable to create " + convertToTitleCase(name))
        log(error)
        process.exit()
    }
}

module.exports = generateComponent