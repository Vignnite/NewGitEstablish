const { errorLog, successLog } = require("../utils/logger");
const { convertToCamelCase } = require("../utils/toCamelCase");

const fs = require("fs");
const path = require("path");
const { convertToTitleCase } = require("../utils/toTitleCase");
const sampleScssFilePath = path.join(__dirname, "..", "..", "public", "component.scss")

function generateComponents(component, name) {
  function renderComponent(component) {
    switch (component) {
      case "input": {
        return `
            <InputField
              placeholder="Enter"
              name="${name}"
              type=""
            />`;
      }
      case "select": {
        return `
            <DropdownField
              options={[]}
              name="${name}"
              placeholder="Select"
              onChange={(value) => setFieldValue("${name}", value)}
              value={values?.${name}}
            />`;
      }
      case "switch": {
        return `
            <SwitchComponent
              name="${name}"
              checked={!!values?.${name}}
              onChange={(value) => setFieldValue("${name}", value)}
            />`;
      }
      case "date": {
        return `
            <DatePickerField
              name="${name}"
              placeholder="Enter"
              value={values?.${name}}
              onChange={(date, dateString) => {
                setFieldValue("${name}", dateString);
              }}
            />`;
      }
      case "radio": {
        return `
            <RadioComponent
              name="${name}"
              value={values?.${name}}
              options={[]}
              onChange={(value) => setFieldValue("${name}", value)}
            />`;
      }
      case "upload" : {
        return `
            <UploadComponent
              accept={"image/*"}
              onUpload={(file, fileUrl) => {
              setFieldValue("${name}", file);
              setFieldValue("${name.replace(/url$/, "Url")}", fileUrl);
              }}
            />`;
      }
      case "otp" : {
        return `
            <OTPField
              numInputs={4}
              value={values?.${name}}
              onChange={(otp) => {
              setFieldValue("${name}", otp);
              }}
            />`;
      }
      default: {
        return "";
      }
    }
  }
  return renderComponent(component);
}

function getComponentClassName(name) {
  switch (name) {
    case "input": {
      return "InputField";
    }
    case "select": {
      return "DropdownField"
    }
    case "switch": {
      return "SwitchComponent"
    }
    case "date": {
      return "DatePickerField"
    }
    case "radio": {
      return "RadioComponent"
    }
    case "upload" : {
      return "UploadComponent"
    }
    case "otp" : {
      return "OTPField"
    }
    default: {
      return "";
    }
  }
}

function generateForm(filePath, fileName, components) {
  if(fileName.toLowerCase() === 'form'){
    errorLog("Form name is invalid")
    process.exit()
  }

  const fileNames = fileName.split(" ");
  if(!fileNames.includes('form')){
    fileNames.push("form")
  }
  const pascalCase = fileNames.map((name) => convertToTitleCase(name)).join("");
  const parentFilePath = path.join(process.cwd(), filePath);
  const dirName = path.join(
    parentFilePath,
    pascalCase
  );
  const camelCase = convertToCamelCase(fileNames.join(" "));
  const kebabCase = fileNames.map(name => name.toLowerCase()).join("-")
  const sampleFormFilePath = path.join(
    __dirname,
    "..",
    "..",
    "public",
    "form.ts"
  );

  if (fs.existsSync(dirName)) {
    errorLog(`${dirName} already exists`)
    process.exit()
  }
  
  fs.mkdirSync(dirName, { recursive: true });
  const formPath = path.join(
    parentFilePath,
    pascalCase,
    `index.tsx`
  );
  const formStylePath = path.join(
    parentFilePath,
    pascalCase,
    `${camelCase}.scss`
  );

  try {
    const rawFormFile = fs.readFileSync(sampleFormFilePath).toString();
    const formFile = rawFormFile
      .replace(/ClassName/gm, pascalCase)
      .replace(/ModelName/gm, pascalCase.replace(/form/i, ""))
      .replace(/stylesFile/, camelCase)
      .split("\n")
      .slice(1)
      .join("\n");

    const actualStackDepth = filePath.replace("./", "").replace("src/views", "").split("/").length

    const modelImportFile = formFile.replace("//model-import", () => {
      return `import { ${pascalCase.replace(/form/i,"")} } from "../${new Array(actualStackDepth).fill("").map(() => "../").join("")}models/${pascalCase.replace(/form/i,"")}/${camelCase.replace(/form/i,"")}.model";`;
    });
    const componentsImportsFile = modelImportFile.replace("//components-imports", () => {
    const componentsSet = components.filter((component, index, componentArray) =>
    index === componentArray.findIndex((comp) => comp.template.toLowerCase() === component.template.toLowerCase())
  ) 
  return componentsSet.map(component => {
        let name = getComponentClassName(component.template.toLowerCase(), component.name)
        return `import ${name} from "../${new Array(actualStackDepth).fill("").map(() => "../").join("")}shared/components/${name}";`
      }).join("\n");
    });
    
    const scssFile = fs.readFileSync(sampleScssFilePath).toString().replace(/component/gm, kebabCase)

    const formComponentsFile = componentsImportsFile.replace("//return", () => {
      return `\n\treturn (
        <div className={"${kebabCase}-form"}>
          <Formik
            initialValues={Object.assign(new ${pascalCase.replace(/form/i,"")}(), data)}
            enableReinitialize
            onSubmit={onSubmit}
          >
          {({ values, setFieldValue, handleSubmit }) => {
            return (
              <Form>
                <Row>
                  ${components
                    .map((component) => {
                      return (`<Col span={24}>${generateComponents(component.template.toLowerCase(),component.name)}
                      </Col>\n`);
                    })
                  .join("")}
                  <Col span={12}>
                    <Button type="default" htmlType="reset">Cancel</Button>
                  </Col>
                  <Col span={12}>
                    <Button type="primary" htmlType="submit">Submit</Button>
                  </Col>  
                </Row>
              </Form>
            );
          }}
          </Formik>
          </div>
        )`;
    });
    fs.writeFileSync(formPath, formComponentsFile);
    fs.writeFileSync(formStylePath, scssFile)
    successLog(`${convertToTitleCase(fileNames.join(" "))} component created...`)
      } catch (error) {
    errorLog(error);
  }
}

export default generateForm;
