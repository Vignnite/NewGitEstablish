const fs = require('fs')
const path = require('path')
const pluralize = require("pluralize")

const {
    errorLog,
    successLog
} = require('../utils/logger')

const {
    convertToTitleCase
} = require('../utils/toTitleCase')

const {
    convertToPascalCase
} = require("../utils/toPascalCase")

const src = path.join(process.cwd(), "src")
const services = path.join(src, "services")
const sampleServiceFilePath = path.join(__dirname, "..", "..", "public", "service.ts")

export function generateServiceFile(fileName) {

    const fileNames = fileName.split(" ")
    const smallCase = fileName.replace(/\s/, "").toLowerCase()
    const snakeCase = fileNames.map(name => name.toLowerCase()).join("_")
    const screemingSnakeCase = fileNames.map(name => name.toUpperCase()).join("_")
    const pascalCase = convertToPascalCase(fileName)
    const camelCase = fileNames.map((name, i) =>
            i === 0 ? name[0].toLowerCase() + name.slice(1) : convertToTitleCase(name))
        .join("")

    const serviceFolderPath = path.join(services, pascalCase + "Service");
    const serviceFilePath = path.join(serviceFolderPath, camelCase + ".service.ts");

    !fs.existsSync(src) &&
        fs.mkdirSync(src);
    !fs.existsSync(services) &&
        fs.mkdirSync(services);
    !fs.existsSync(serviceFolderPath) &&
        fs.mkdirSync(serviceFolderPath)

    try {
        const rawServiceFile = fs.readFileSync(sampleServiceFilePath).toString()
        const serviceFile = rawServiceFile
            .replace(/classname_small/gm, smallCase)
            .replace(/classname_block/gm, "_"+pluralize(camelCase))
            .replace(/ClassNames/gm, pluralize(pascalCase))
            .replace(/class_names/gm, pluralize(snakeCase))
            .replace(/classnames/gm, pluralize(camelCase))
            .replace(/CLASSNAMES/gm, pluralize(screemingSnakeCase))
            .replace(/classname/gm, camelCase)
            .replace(/CLASSNAME/gm, screemingSnakeCase)
            .replace(/class_name/gm, snakeCase)
            .replace(/ClassName/gm, pascalCase)
            .split("\n")
            .slice(1)
            .join("\n")

        fs.writeFileSync(serviceFilePath, serviceFile)
        successLog(`${convertToTitleCase(fileName)} Service file created...`);

    } catch (error) {
        errorLog(error)
        process.exit()
    }
}