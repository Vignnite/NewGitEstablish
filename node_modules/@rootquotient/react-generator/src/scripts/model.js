import pluralize from 'pluralize';
import { exit } from 'process';
import { cli } from '../cli';
import { generateTemplate } from '../main';
import {
    successLog,
    errorLog
} from '../utils/logger';

const fs = require('fs');
const path = require('path');

const {
    convertToTitleCase
} = require('../utils/toTitleCase')

const capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);

const snakeToCamel = str => str.replace(/([-_]\w)/g, g => g[1].toUpperCase())

const snakeToPascal = (string) => {
    return string.split("_")
        .map(substr => substr.charAt(0)
            .toUpperCase() +
            substr.slice(1))
        .join("")
};

const src = path.join(process.cwd(), "src")
const models = path.join(src, "models")

const sourceFilePath = path.join(process.cwd(), 'input.json');

export function handleModelGeneration() {
    if (!fs.existsSync(models))
        fs.mkdirSync(models);

    const data = JSON.parse(fs.readFileSync(sourceFilePath));

    generateModel(data.model)
}


function generateModel(jsonData, parentKey) {
    let parentFilePath;
    if (parentKey) {
        parentFilePath = path.join(models, capitalize(snakeToCamel(parentKey)), snakeToCamel(parentKey) + '.model.ts');
    }
    const jsonKeys = Object.keys(jsonData);
    jsonKeys.forEach((key, i) => {
        let isArray = false;
        let isNotPrimitiveArray = false;

        if (fs.existsSync(path.join(models, snakeToPascal(key))))
            errorLog(`${convertToTitleCase(key)} model already exists`)

        else
            if (jsonData[key] && typeof jsonData[key] === 'object') {
                if (Array.isArray(jsonData[key]) && jsonData[key].length > 0) {
                    isArray = true;
                    if(typeof jsonData[key][0] === "object")
                        jsonData[key] = jsonData[key][0];
                }

                if((isArray && typeof jsonData[key][0] === "object") || (!("number boolean string").includes(typeof jsonData[key][0]) && typeof jsonData[key] === "object") && jsonData[key].length !== 0)
                    isNotPrimitiveArray = true

                if (parentKey) {
                    if (isArray && (typeof jsonData[key][0] === "string" || typeof jsonData[key][0] === "number")) {
                        fs.appendFileSync(parentFilePath, `\t@serializable(alias('${pluralize(key)}', list(primitive())))\n`);
                        fs.appendFileSync(parentFilePath, `\t${snakeToCamel(pluralize(key))}?: ${typeof jsonData[key][0]}[] = [];\n\n`);
                    } else if (isArray) {
                        fs.appendFileSync(parentFilePath, `\t@serializable(alias('${pluralize(key)}', list(object(${capitalize(snakeToCamel(key))}))))\n`);
                        fs.appendFileSync(parentFilePath, `\t${snakeToCamel(pluralize(key))}?: ${capitalize(snakeToCamel(key))}[] = [];\n\n`);
                    } else if(typeof jsonData[key] === "object" && !(jsonData[key].length == 0 && Array.isArray(jsonData[key]))) {
                        fs.appendFileSync(parentFilePath, `\t@serializable(alias('${key}', object(${capitalize(snakeToCamel(key))})))\n`);
                        fs.appendFileSync(parentFilePath, `\t${snakeToCamel(key)}?: ${capitalize(snakeToCamel(key))};\n\n`);
                    }
                    if (isNotPrimitiveArray) {
                        const data = fs.readFileSync(parentFilePath);
                        const importLine = `\nimport {${capitalize(snakeToCamel(key))}} from '../${capitalize(snakeToCamel(key))}/${snakeToCamel(key)}.model';\n`;
                        fs.writeFileSync(parentFilePath, importLine + data);
                    }
                }
                if (isNotPrimitiveArray) {
                    const dirName = path.join(models, capitalize(snakeToCamel(key)));
                    if (!fs.existsSync(dirName)) {
                        fs.mkdirSync(dirName);
                    }
                    const fileName = snakeToCamel(key) + '.model.ts';
                    const filePath = dirName + '/' + fileName;
                    fs.appendFileSync(filePath, `\nimport {serializable, alias, object, list, primitive} from 'serializr';\n\n`);
                    fs.appendFileSync(filePath, "export class " + capitalize(snakeToCamel(key)) + " { \n\n");
                    generateModel(jsonData[key], key);
                }
            } else {
                fs.appendFileSync(parentFilePath, `\t@serializable(alias('${key}', primitive()))\n`);
                fs.appendFileSync(parentFilePath, `\t${snakeToCamel(key)}?: ${typeof jsonData[key]};\n\n`);
            }

        if (i === jsonKeys.length - 1) {
            if (parentKey) {
                fs.appendFileSync(parentFilePath, "}");
                successLog(`${convertToTitleCase(parentKey)} model created...`)
            }
        }
    });
}