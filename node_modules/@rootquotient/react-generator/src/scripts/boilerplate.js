const path = require('path');
const fs = require('fs');

const shell = require('shelljs')

const {
    errorLog,
    successLog
} = require('../utils/logger')

const {
    convertToTitleCase
} = require('../utils/toTitleCase')

const repoUrls = {
    ssh: "git@gitlab.com:rootquotient/react-ts-content-api-antd-boilerplate.git",
    https: "https://gitlab.com/rootquotient/react-ts-content-api-antd-boilerplate.git"
}


export function generateProjectSetup(projectName, isSsh) {
    const parentPath = path.join(process.cwd(), projectName)
    try {
        if (fs.existsSync(parentPath))
            errorLog(`Project already exists`)

        else {
            shell.cd(process.cwd())
            const folderName = projectName.split(" ").join("-")
            try {
                shell.exec(`git clone ${repoUrls[isSsh ? "ssh" : "https"]}`)
                shell.exec(`
                    mv react-ts-content-api-antd-boilerplate ${folderName};
                    cd ${folderName};
                    rm -rf .git;
                    sed -i${process.platform === 'linux' ? '' : ' '}"" -e 's|react-ts-antd-boilerplate|${folderName}|g' package.json;
                    sed -i${process.platform === 'linux' ? '' : ' '}"" -e 's|react-ts-antd-boilerplate|${folderName}|g' package-lock.json;
                    git init;
                    npm i;
                    `)
                const indexFilePath = path.join(process.cwd(), folderName, "public", "index.html")
                if (!fs.existsSync(indexFilePath))
                    throw new Error("Unable to create project")
                const indexFile = fs.readFileSync(indexFilePath)
                fs.writeFileSync(indexFilePath, indexFile.toString().replace("react-ts-antd-boilerplate", convertToTitleCase(projectName)))
                shell.exec(`s
                cd ${folderName};
                git add .;
                git commit -m "App: Initial Setup";`)
                successLog(`${convertToTitleCase(projectName)} project created...`)
            } catch (error) {
                errorLog(error)
                shell.exec("rm -rf .git;")
            }
        }
    } catch (error) {
        process.exit()
    }
}