const fs = require("fs");
const path = require("path");
const { successLog } = require("../utils/logger");
const { convertCamelToTitle } = require("../utils/convertCameltoTitle");
const { convertToTitleCase } = require("../utils/toTitleCase");

function generateValidator(fileName, filePath, list) {
  const fileNames = fileName.split(" ");
  const pascalCase = fileNames.map((name) => convertToTitleCase(name)).join("");
  const camelCase =
    pascalCase.substr(0, 1).toLowerCase() + pascalCase.substr(1);
  const dirName = path.join(filePath);

  function generateMethods(answers) {
    let method = "";
    const { validatorQuestions, name, ...rest } = answers;
    if (validatorQuestions.includes("mixed")) {
      method = ".mixed()";
    }
    if (validatorQuestions.includes("string")) {
      method = ".string()";
    }
    if (validatorQuestions.includes("number")) {
      method = ".number()";
    }
    if (validatorQuestions.includes("bool")) {
      method = ".bool()";
    }
    if (validatorQuestions.includes("email")) {
        method = ".string().email()"
    }
    if (validatorQuestions.includes("password (regex)")) {
      method = `.string().matches(
            /^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/,
            "Password must has at least 8 characters that include at least 1 number and 1 special character in (!@#$%^&*)"
          )`;
    }

    if (validatorQuestions.includes("custom (regex)")) {
      method += `.string().matches(${rest.regex}, "${rest.customErrorMessage}")`
    }
    if (validatorQuestions.includes("min") || validatorQuestions.includes("max")) {
      if (!validatorQuestions.includes("number") && !validatorQuestions.includes("string")) {
        method += `.string()`
      }
      if (validatorQuestions.includes("min")) {
        method += `.min(${rest.min}, "Must be more than ${rest.min} character${rest.min > 1 && "s"}")`
      }
      if (validatorQuestions.includes("max")) {
        method += `.max(${rest.max}, "Must be less than ${rest.max} character${rest.max !== 1 && "s"}")`
      }
    }
    if(validatorQuestions.includes("required")) {
        method += `.required("${convertCamelToTitle(name)} is required.")`
    }   

    return method;
  }

  if (!fs.existsSync(dirName)) {
    fs.mkdirSync(dirName, { recursive: true });
  }

  const newfilePath = path.join(
    filePath,
    camelCase.replace(/validation/gi, "") + "FormValidation.ts"
  );
  fs.appendFileSync(newfilePath, `import * as Yup from "yup";\n\n`);
  fs.appendFileSync(
    newfilePath,
    `export const ${
      camelCase.replace(/validation/gi, "") + "FormValidation"
    } = Yup.object().shape({\n`
  );
  list.map((value, index) => {
    fs.appendFileSync(
      newfilePath,
      `\t${value.name}: Yup${generateMethods(value)}${
        list.length - 1 == index ? "\n})" : ",\n"
      }`
    );
  });
  successLog(`${camelCase.replace(/validation/gi, "") + "FormValidation.ts"} file created...`)
}

export default generateValidator;
