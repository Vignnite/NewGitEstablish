const fs = require('fs')
const path = require('path')

const {
  generateServiceFile
} = require("./scripts/service")
const {
  handleModelGeneration
} = require("./scripts/model")
const {
  generateProjectSetup
} = require("./scripts/boilerplate")

const {
  errorLog,
  log
} = require('./utils/logger')
const generateComponent = require('./scripts/component')
const {
  default: generateValidator
} = require("./scripts/validator");

const {
  isGitRepo
} = require("./utils/isGitRepo");
const {
  default: generateForm
} = require("./scripts/form");

// const generateTemplate = (templates, fileName, extras = {}) => {
//   // extras: {isSsh?:boolean}

//   const sourceFilePath = path.join(process.cwd(), "input.json");

//   const insideGitRepo = isGitRepo();

//   if (templates.includes("project") && insideGitRepo) {
//     console.log(
//       "\x1b[31m%s\x1b[0m",
//       "Can't create project inside another repository"
//     );
//     process.exit();
//   } else if (!insideGitRepo) {
//     console.log(
//       "\x1b[31m%s\x1b[0m",
//       "Files could be generated only inside a git repository"
//     );
//     process.exit();
//   } else
//     templates.forEach((template) => {
//       switch (template) {
//         case "service":
//           generateServiceFile(fileName);
//           break;

//         case "model":
//           if (fs.existsSync(sourceFilePath)) {
//             handleModelGeneration();
//           } else {
//             console.log("input.json file is required to generate model");
//             process.exit();
//           }
//           break;

//         case "component":
//           console.log("Not yet implemented");
//           break;

//         case "project":
//           generateProjectSetup(fileName, extras.isSsh);
//           break;
//       }
//     });
// };

const generateTemplate = (templates, fileName, options = {}) => { // options: {isSsh?:boolean,path?:string}

  const sourceFilePath = path.join(process.cwd(), 'input.json');

  const insideGitRepo = isGitRepo()

  if (templates.includes("project") && insideGitRepo) {
    errorLog("Can't create project inside another repository")
    process.exit()
  } else if (!templates.includes("project") && !insideGitRepo) {
    errorLog("Files could be generated only inside a git repository")
    process.exit()
  } else
    switch (templates) {
      case "service":
        generateServiceFile(fileName)
        break;

      case "model":
        if (fs.existsSync(sourceFilePath)) {
          handleModelGeneration();
        } else {
          errorLog("input.json file is required to generate model")
          process.exit()
        }
        break;

      case "component":
        generateComponent(fileName, options.path)
        break;

      case "project":
        generateProjectSetup(fileName, options.isSsh)
        break;
      case "form":
        generateForm(options.formPath.replace(/^\/|\/$/g, ""), options.formName, options.formAnswers);
        break;

      case "validator":
        generateValidator(options.validatorName.replace(/^\/|\/$/g, ""), options.validatorPath, options.validatorAnswers);
        break;
    }
}

module.exports = {
  generateTemplate,
};