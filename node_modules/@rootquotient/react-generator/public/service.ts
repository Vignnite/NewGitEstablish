// @ts-nocheck
import { useState } from 'react';
import { deserialize, serialize } from 'serializr';
import { generatePath } from 'react-router-dom';
import axiosInstance from '../../interceptor/axiosInstance';
import { ApiRoutes } from './../../routes/routeConstants/apiRoutes';
import { ClassName } from '../../models/ClassName/classname.model';
import { Pagination } from './../../models/Pagination/pagination.model';

const ClassNameService = () => {

    const [loading, setLoading] = useState<boolean>(false)

    const [buttonLoading, setButtonLoading] = useState<boolean>(false)

    const [classnames, setClassNames] = useState<ClassName[]>([])

    const [classnamesPagination, setClassNamesPagination] = useState<Pagination | null>()

    const [classname, setClassName] = useState<ClassName | null>()

    const fetchClassNames = async (params?: {
        search?: string,
        page?: number
    }) => {
        try {
            setLoading(true)
            const response = await axiosInstance.get(ApiRoutes.CLASSNAMES, { params })
            const data = deserialize(ClassName, response.data["class_names"]) as ClassName[]
            const pagination = deserialize(Pagination, response.data["meta"])
            setClassNamesPagination(pagination)
            setClassNames(data)
        } catch (error) {
            setClassNames([])
        } finally {
            setLoading(false)
        }
    }

    const createClassName = async (classname: ClassName) => {
        try {
            setButtonLoading(true)
            const payload = { classname_small: serialize(ClassName, classname) }
            const response = await axiosInstance.post(ApiRoutes.CLASSNAMES, payload)
            const data = deserialize(ClassName, response.data["class_name"]) as ClassName;
            setClassName(data)
        } catch (error) {
            setClassName(null)
        } finally {
            setButtonLoading(false)
        }
    }

    const updateClassName = async (classname: ClassName) => {
        try {
            setButtonLoading(true)
            const payload = { classname_small: serialize(ClassName, classname) }
            const API_URL = generatePath(ApiRoutes.CLASSNAMES_SPECIFIC, { classnameId: String(classname.id) })
            const response = await axiosInstance.put(API_URL, payload)
            const data = deserialize(ClassName, response.data["class_name"]) as ClassName;
            setClassName(data)
        } catch (error) {
            setClassName(null)
        } finally {
            setButtonLoading(false)
        }
    }

    const deleteClassName = async (classnameId: string) => {
        try {
            setButtonLoading(true)
            const API_URL = generatePath(ApiRoutes.CLASSNAMES_SPECIFIC, { classnameId })
            await axiosInstance.delete(API_URL)
            return true
        } catch (error) {
            return false
        } finally {
            setButtonLoading(false)
        }
    }

    const showClassName = async (classnameId: string) => {
        try {
            setLoading(true)
            const API_URL = generatePath(ApiRoutes.CLASSNAMES_SPECIFIC, { classnameId })
            const response = await axiosInstance.get(API_URL)
            const data = deserialize(ClassName, response.data["class_name"]) as ClassName;
            setClassName(data)
        } catch (error) {
            setClassName(null)
        } finally {
            setLoading(false)
        }
    }

    return {
        loading,
        classname,
        classnames,
        buttonLoading,
        showClassName,
        createClassName,
        deleteClassName,
        fetchClassNames,
        updateClassName,
        classnamesPagination,
    }
}

export default ClassNameService